<!DOCTYPE html>
<html>
<head>
    <title>CATS-Feature Test Case Coverage Report-0.1</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Fri Jan 26 2018 11:18:10 GMT-0800 (PST) -->

    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Jan 26 2018 11:18:10 GMT-0800 (PST)";
        var ARTIFACT = "F425";
        var BUILDER  = "rajan08";
        var CHECKSUM = 23551585929;
    </script>

    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns)
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->


    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',

    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,

    /**
     *
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",

    defaults: { padding: 5, margin: 5 },

    closable: true,

    draggable: true,

    autoShow: true,

    width: 350,

    informationalConfig: null,

    showLog: false,
    logger: null,

    items: [
        {xtype:'container', itemId:'information' },
        {xtype:'container', itemId:'button_box'}
    ],

    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },

    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.

        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }

        return chk;
    },

    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });

        return deferred.promise;
    },

    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);

        container.add(config);
    },

    afterRender: function() {
        var app = Rally.getApp();

        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
        }

        if ( this.showLog && this.logger ) {
            this.down('#button_box').add({
                xtype:'rallybutton',
                text:'Show Log',
                listeners: {
                    scope: this,
                    click: function() {
                        this.logger.displayLog();
                    }
                }
            });
        }

        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },

    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                dock: 'bottom'
            });
        }

        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });

        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);

            if ( ARTIFACT ) {
                build_html = build_html + "<br/>Source artifact: " + ARTIFACT;
            }

            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'top',
                html: build_html
            });
        }
    }
});

/*
 * originally written for when we supported older versions of IE that wouldn't
 * deal with console.log.
 *
 * Now allows for saving log.
 */
Ext.define('CArABU.technicalservices.Logger',{

    saveForLater: false,
    saveLines: 100,
    logArray: [],

    constructor: function(config){
        Ext.apply(this,config);
    },

    setSaveForLater: function(saveme){
        this.saveForLater = saveme;
    },

    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";

        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        if ( this.saveForLater ) {
            if ( !this.logArray) {
                this.logArray = [];
            }
            this.logArray.push(output_args.join(' '));

            if ( this.logArray.length > this.saveLines ) {
                this.logArray.shift();
            }
        }

        window.console && console.log.apply(console,output_args);
    },

    getLogText: function() {
        if ( ! this.logArray || this.logArray.length === 0 ) { return "-- no log --"; }
        return this.logArray.join('<br/>');
    } ,

    displayLog: function() {
        var text = this.getLogText();

        this.popup = Ext.create('Rally.ui.dialog.Dialog', {
            width      : Ext.getBody().getWidth() - 20,
            height     : Ext.getBody().getHeight() - 20,
            closable   : true,
            title      : 'Log',
            autoShow   : true,
            layout     : 'border',
            defaults   : {
                layout : 'fit',
                width  : '50%',
                border : false
            },
            items: [{
                region : 'center',
                xtype: 'container',
                html: text,
                autoScroll: true
            }]
        });
    }
});

Ext.define('TSUtilities', {

    singleton: true,

    loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    console.error("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    loadAStoreWithAPromise: function(model_name, model_fields){
        var deferred = Ext.create('Deft.Deferred');

        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    console.error("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    }
});

Ext.define('CArABU.technicalservices.chunk.Store',{

    MAX_CHUNK_SIZE: 50,
    logger: new CArABU.technicalservices.Logger(),

    constructor: function(config) {
        this.chunkProperty = config.chunkProperty;
        this.chunkValue = config.chunkValue;

        this.storeConfig = config.storeConfig || {};
        this.storeType = config.storeType || 'Rally.data.wsapi.Store';

    },
    load: function(){
        var deferred = Ext.create('Deft.Deferred');

        var promises = [],
            chunkArray = this.chunkValue,
            config = this.storeConfig;

        for (var i=0; i < chunkArray.length; i = i+this.MAX_CHUNK_SIZE){
            var chunk = Ext.Array.slice(chunkArray, i, i + this.MAX_CHUNK_SIZE);
            promises.push(this._fetchChunk(chunk, config));
        }

        Deft.Promise.all(promises).then({
            success: function(results){
                var records = _.flatten(results);
                this.logger.log('load SUCCESS results', results,records);
                deferred.resolve(records);
            },
            failure: function(msg){
                this.logger.log('load FAILURE', chunkArray, msg);
                deferred.reject(msg);
            },
            scope: this
        });


        return deferred;
    },

    _fetchChunk: function(objectIDs, config){
        this.logger.log('chunk.Store._fetchChunk',objectIDs, config);
        var deferred = Ext.create('Deft.Deferred');

        var chunkProperty = this.chunkProperty,
            filters = _.map(objectIDs, function(o){ return {
                property: chunkProperty,
                value: o
            }
        });
        filters = Rally.data.wsapi.Filter.or(filters);


        if (config.filters){
            if (Ext.isArray(config.filters)){
                config.filters  = Rally.data.wsapi.Filter.and(config.filters);
            }
            filters = filters.and(config.filters);
        }
        this.logger.log('chunk.Store._fetchChunk',filters.toString());

        var fetch = config.fetch || true,
            model = config.model || 'HierarchicalRequirement';

        Ext.create(this.storeType,{
            fetch: fetch,
            filters: filters,
            model: model,
            context: {project: null}
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    var msg = "Failure loading records for objectIDs: " + objectIDs.join(', ') + ":  " + operation.error.errors.join(',');
                    deferred.resolve(msg);
                }
            }
        });
        return deferred;
    }

});
Ext.override(Rally.data.wsapi.TreeStore,{
    _decorateModels: function() {
        var models = this.model;

        if (_.isFunction(models.getArtifactComponentModels)) {
            models = models.getArtifactComponentModels();
        }

        Ext.Array.each(models, function(m){
                m.addField({name: 'Passing', type: 'auto',  defaultValue: 0});
                m.addField({name: 'Failing', type: 'auto', defaultValue: 0});
                m.addField({name: 'NoRun', type: 'auto',  defaultValue: 0});
                m.addField({name: 'Other', type: 'auto',  defaultValue: 0});
                m.addField({name: 'TotalStories', type: 'auto',  defaultValue: 0});
                m.addField({name: 'TotalCovered', type: 'auto',  defaultValue: 0});                
        });

        _.each(Ext.Array.from(models), Rally.ui.grid.data.NodeInterface.decorate, Rally.ui.grid.data.NodeInterface);
    }
});

Ext.override(Rally.ui.renderer.template.ScheduleStateTemplate, {
    _getSymbolState: function(recordData, state) {
        var symbolState;
        if (recordData.ScheduleStatePrefix) {
            //
            // if (!recordData.isDirty || this._isCreate(recordData)) {
            //      symbolState = recordData.ScheduleStatePrefix;
            // }  else {
            //     symbolState = '';
            // }
            // overriding this as the record gets dirty after adding the task estimate to UserStory and PortfolioItems
            
            symbolState = recordData.ScheduleStatePrefix;
            
        } else {
            symbolState = state === 'In-Progress' ? 'P' : state.charAt(0);
        }
        return symbolState;
    }
});

Ext.override(Rally.ui.grid.TreeGrid, {
    _mergeColumnConfigs: function(newColumns, oldColumns) {

        var mergedColumns= _.map(newColumns, function(newColumn) {
            var oldColumn = _.find(oldColumns, {dataIndex: this._getColumnName(newColumn)});
            if (oldColumn) {
                return this._getColumnConfigFromColumn(oldColumn);
            }

            return newColumn;
        }, this);
        mergedColumns = mergedColumns.concat(this.config.derivedColumns);
        return mergedColumns;
    },
    _restoreColumnOrder: function(columnConfigs) {

        var currentColumns = this._getColumnConfigsBasedOnCurrentOrder(columnConfigs);
        var addedColumns = _.filter(columnConfigs, function(config) {
            return !_.find(currentColumns, {dataIndex: config.dataIndex}) || Ext.isString(config);
        });

        return currentColumns.concat(addedColumns);
    },
    _applyStatefulColumns: function(columns) {
        if (this.alwaysShowDefaultColumns) {
            _.each(this.columnCfgs, function(columnCfg) {
                if (!_.any(columns, {dataIndex: this._getColumnName(columnCfg)})) {
                    columns.push(columnCfg);
                }
            }, this);
        }
        if (this.config && this.config.derivedColumns){
            this.columnCfgs = columns.concat(this.config.derivedColumns);
        } else {
            this.columnCfgs = columns;
        }
    }
});

/* Opening all links in new window as per customer request. */
Ext.override(Rally.nav.DetailLink, {

        getLink: function(options) {
            var data = options.record.isModel ? options.record.data : options.record;
            var target =  Rally.util.Window.isInFrame() ? '_top' : '';
            var hover = '';

            var href = Rally.nav.Manager.getDetailUrl(data, options);

            if(!href){
                return options.text;
            }

            var showHover = options.showHover !== false && window.activateEl;
            if(showHover){
                hover = this._getHoverText(data._ref);
            }

            var oid = Rally.util.Ref.getOidFromRef(data._ref);

            return this.template.apply({
                href: href,
                target: '_blank',
                onclick: options.onclick,
                text: options.text,
                hover: hover,
                tooltip: options.showTooltip !== false,
                id: showHover? 'hov' + oid : ''
            });

        }

});
//template
Ext.define('CArABU.technicalservices.ResultGraphTemplate',{
    extend: 'Ext.XTemplate',

    /**
     * @cfg {String}
     * define a width if necessary to fit where it's being used
     */
    width: '90%',
    /**
     * @cfg {String}
     * define a height if necessary to fit where it's being used
     */
    height: '20px',

    config: {

        calculateColorFn: function(stateIdx){
            return colors[stateIdx];
        },
        getContainerClass: function(recordData) {
            return '';
        },
        getClickableClass: function(){
            return '';
        },
        getDimensionStyle: function(){
            return 'width: ' + this.width + '; height: ' + this.height + '; line-height: ' + this.height + ';display: inline-block';
        },
        calculateWidth: function (values, color) {
            var total = Ext.Array.sum(Ext.Object.getValues(values));
            if (total > 0){
              var pct = (values[color] || 0)/total * 100;
              return pct + '%';
            }
            return 0;
        }
    },

    constructor: function(config) {
        var templateConfig = [
                '<tpl>',
                '<div class="progress-bar-container {[this.getClickableClass()]} {[this.getContainerClass(values)]}" style="{[this.getDimensionStyle()]}">',
                '<tpl foreach=".">',
                  '<div class="rly-progress-bar" style="text-align:center;background-color: {$}; width: {[this.calculateWidth(parent,xkey)]}; "></div>',
                '</tpl>',
                '</div>',
                '</tpl>'
            ];

        return this.callParent(templateConfig);
    }
});
Ext.define("CArABU.app.TSApp", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new CArABU.technicalservices.Logger(),
    defaults: { margin: 10 },
    layout: 'border',

    items: [
        {xtype:'container',itemId:'selector_box',layout:{type:'hbox'}, margin: '10 10 50 10' },
        {xtype:'container',itemId:'display_box', margin: '50 10 10 10' }
    ],

    integrationHeaders : {
        name : "CArABU.app.TSApp"
    },

    modelNames : ['PortfolioItem/Feature'],
    launch: function() {
        var me = this;
        //this.setLoading("Loading stuff...");

        this.logger.setSaveForLater(this.getSetting('saveLog'));

        me._addSelector();
    },

    _addSelector: function(){
        var me = this;
       
        me.down('#selector_box').add([
            {
                xtype: 'rallyreleasecombobox',
                name: 'releaseCombo',
                itemId: 'releaseCombo',
                stateful: true,
                stateId: me.getContext().getScopedStateId('releaseCombo'),   
                fieldLabel: 'Select Release:',
                multiSelect: true,
                margin: '10 10 10 10', 
                width: 450,
                labelWidth: 100,
                cls: 'rally-checkbox-combobox',
                valueField:'Name',
                displayField: 'Name',
                listeners: {
                    change: me.updateView,
                    scope: me
                }
                ,
                listConfig: {
                    cls: 'rally-checkbox-boundlist',
                    itemTpl: Ext.create('Ext.XTemplate',
                        '<div class="rally-checkbox-image"></div>',
                        '{[this.getDisplay(values)]}</div>',
                        {
                            getDisplay: function(values){
                                return values.Name;
                            }
                        }
                    )
                }
            }
        ]);
    },

    updateView: function(){
        var me = this;


        if(!me.down('#releaseCombo')) return;
        console.log('releases >',me.down('#releaseCombo').value);
        var pi_object_ids = [];


        me.setLoading(true);
        me._getSelectedPIs(me.modelNames[0]).then({
            success: function(records){
                // console.log('_getSelectedPIs>>',records);
                Ext.Array.each(records,function(r){
                    pi_object_ids.push(r.get('ObjectID'));
                });


                Deft.Promise.all([me._getTCFromSnapShotStore(pi_object_ids),me._getUSFromSnapShotStore(pi_object_ids)]).then({
                    success: function(results){
                        console.log('results',results);

                        me.lb_tc_results = results[0];
                        var tc_filter = [];
                        me.lb_us_results = results[1];
                        var us_filter = [];                        
                        Ext.Array.each(results[0], function(tc){
                            tc_filter.push(tc.get('_ItemHierarchy')[tc.get('_ItemHierarchy').length - 2]);
                        });

                        // Ext.Array.each(results[1], function(us){
                        //     us_filter.push(tc.get('_ItemHierarchy')[tc.get('_ItemHierarchy').length - 1]);
                        // });

                        me._getTCs(tc_filter).then({
                            success: function(records){
                                console.log('_getTCs>>',records);
                                // me.totalTaskTimeSpent = 0;
                                me.lastVerdict = {}
                                Ext.Array.each(records,function(tc){
                                    me.lastVerdict[tc.get('ObjectID')] = tc.get('LastVerdict');
                                });

                                Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
                                    models: me.modelNames,
                                    enableHierarchy: true
                                }).then({
                                    success: me._addGrid,
                                    scope: me
                                });

                            },
                            scope: me
                        });

                    },
                    scope: me
                });

            },
            scope: me         
        });


    },

    _getSelectedPIs: function(selectedPI,filters){
        var me = this;
        var config = {
                        model : selectedPI,
                        fetch : ['ObjectID','AcceptedLeafStoryPlanEstimateTotal','LeafStoryPlanEstimateTotal','PlanEstimate','ScheduleState'],
                        limit:'Infinity'
                    }
        if(filters){
            config['filters'] = filters;
        }
        return me._loadWsapiRecords(config);
    },

    _getTCs: function(filters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        Ext.create('CArABU.technicalservices.chunk.Store',{
            storeConfig: {
                model: 'TestCase',
                fetch: ['ObjectID','LastVerdict'],
            },
            chunkProperty: 'WorkProduct.ObjectID',
            chunkValue: filters
        }).load().then({
            success: function(records){
                deferred.resolve(records);
            },
            failure: me.showErrorNotification,
            scope: me
        });

        return deferred.promise;
    }, 

    _getUserStories: function(filters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        Ext.create('CArABU.technicalservices.chunk.Store',{
            storeConfig: {
                model: 'HierarchicalRequirement',
                fetch: ['ObjectID'],
            },
            chunkProperty: 'ObjectID',
            chunkValue: filters
        }).load().then({
            success: function(records){
                deferred.resolve(records);
            },
            failure: me.showErrorNotification,
            scope: me
        });

        return deferred.promise;
    }, 

    _getTCFromSnapShotStore:function(piObjectIDs){
        var me = this;
        var deferred = Ext.create('Deft.Deferred');

        var find = {
                        "_TypeHierarchy": "TestCase",
                        "_ItemHierarchy": { $in: piObjectIDs }
                    };
        find["__At"] = "current";

        var snapshotStore = Ext.create('Rally.data.lookback.SnapshotStore', {
            "fetch": [ "ObjectID","LastVerdict","_ItemHierarchy"],
            "find": find,
            "useHttpPost": true
            // ,
            // "removeUnauthorizedSnapshots":true
        });

        snapshotStore.load({
            callback: function(records, operation) {
                console.log('operation>>',operation);
                if(operation.wasSuccessful()){
                    //deferred.resolve([piObjectIDs,records]);
                    deferred.resolve(records);
                }else{
                    if(operation.error.status === 403) {
                        me.showErrorNotification('You do not have required permissions to access the data.');
                    }else{
                        me.showErrorNotification('Problem Loading');
                    }
                    me.setLoading(false);
                }
                
            },
            scope:me
        });
    
        return deferred;
    },


    _getUSFromSnapShotStore:function(piObjectIDs){
        var me = this;
        var deferred = Ext.create('Deft.Deferred');

        var find = {
                        "_TypeHierarchy": "HierarchicalRequirement",
                        "_ItemHierarchy": { $in: piObjectIDs }
                    };
        find["__At"] = "current";

        var snapshotStore = Ext.create('Rally.data.lookback.SnapshotStore', {
            "fetch": [ "ObjectID","_ItemHierarchy","FormattedID","TestCases"],
            "find": find,
            "useHttpPost": true
            // ,
            // "removeUnauthorizedSnapshots":true
        });

        snapshotStore.load({
            callback: function(records, operation) {
                console.log('operation>>',operation);
                if(operation.wasSuccessful()){
                    //deferred.resolve([piObjectIDs,records]);
                    deferred.resolve(records);
                }else{
                    if(operation.error.status === 403) {
                        me.showErrorNotification('You do not have required permissions to access the data.');
                    }else{
                        me.showErrorNotification('Problem Loading');
                    }
                    me.setLoading(false);
                }
                
            },
            scope:me
        });
    
        return deferred;
    },

    _addGrid: function (store) {

        var me = this;
        var context = me.getContext();
        store.on('load', me._updateAssociatedData, me);
        var r_filters = [];
        Ext.Array.each(me.down('#releaseCombo').value, function(rel){
            r_filters.push({
                property: 'Release.Name',
                value: rel
            })
        });

        r_filters = Rally.data.wsapi.Filter.or(r_filters)

        console.log('Filter>>', r_filters && r_filters.toString());
        me.down('#display_box').removeAll();
        
        me.down('#display_box').add({
                  itemId: 'pigridboard',
                  xtype: 'rallygridboard',
                  context: context,
                  modelNames: me.modelNames,
                  toggleState: 'grid',
                  stateful: false,
                  plugins: me._getPlugins(),
                  gridConfig: {
                    store: store,
                    enableEditing: false,
                      storeConfig:{
                        filters: r_filters
                      },                       
                    columnCfgs: [
                          'Name',
                          'ScheduleState',
                          'Owner',
                          'PlanEstimate'
                      ],
                    derivedColumns: me.getDerivedColumns(),
                    shouldShowRowActionsColumn:false,
                    enableRanking: false,
                    enableBulkEdit: false
                  },
                  height: me.getHeight(),
                  width: me.getWidth()
              });

        me.setLoading(false);
    },

    _updateAssociatedData: function(store, node, records, success){
        var me = this;
        me.suspendLayouts();
        Ext.Array.each(records,function(r){

            var totalPass = 0;
            var totalFail = 0;
            var totalNoRun = 0;
            var totalOther = 0;

            var totalStories = 0;
            var totalCovered = 0;


            Ext.Array.each(me.lb_tc_results,function(lbTc){
                if(Ext.Array.contains(lbTc.get('_ItemHierarchy'),r.get('ObjectID'))){
                    if(me.lastVerdict[lbTc.get('ObjectID')] == "Pass"){
                        totalPass++;
                    }else if(me.lastVerdict[lbTc.get('ObjectID')] == "Fail"){
                        totalFail++
                    }else if(me.lastVerdict[lbTc.get('ObjectID')] == null || me.lastVerdict[lbTc.get('ObjectID')] == ""){
                        totalNoRun++
                    }else{
                        totalOther++
                    }
                }
            });

            Ext.Array.each(me.lb_us_results,function(lbUs){
                if(Ext.Array.contains(lbUs.get('_ItemHierarchy'),r.get('ObjectID'))){
                    totalStories++;
                    if(lbUs.get('TestCases') && lbUs.get('TestCases').length > 0) totalCovered++;
                }
            });            

            r.set('Passing', totalPass);
            r.set('Failing', totalFail);
            r.set('NoRun', totalNoRun);
            r.set('Other', totalOther);
            r.set('TotalStories', totalStories);
            r.set('TotalCovered', totalCovered);


        });
        me.resumeLayouts();
    },

    _getPlugins: function(){
        var me = this;
       
        var plugins = [
        {
                ptype: 'rallygridboardinlinefiltercontrol',
                inlineFilterButtonConfig: {
                    stateful: true,
                    stateId: me.getContext().getScopedStateId('filters'),
                    modelNames: me.modelNames,
                    inlineFilterPanelConfig: {
                        collapsed: false,
                        quickFilterPanelConfig: {
                            defaultFields: ['ArtifactSearch', 'Owner'],
                            addQuickFilterConfig: {
                                whiteListFields: ['Milestones', 'Tags']
                            }
                        },
                        advancedFilterPanelConfig: {
                            advancedFilterRowsConfig: {
                                propertyFieldConfig: {
                                    whiteListFields: ['Milestones', 'Tags']
                                }
                            }
                        }  
                    }                  
                },
                
        }
        ];

        plugins.push({
            ptype: 'rallygridboardfieldpicker',
            headerPosition: 'left',
            modelNames: me.modelNames,
            stateful: true,
            gridAlwaysSelectedValues: ['Name','Owner'],
            stateId: me.getContext().getScopedStateId('field-picker')
        });

        return plugins;        
    },

    _getColumnCfgs: function(){
        var me = this;

        return  [{
            dataIndex: 'Name',
            text: 'Name',
            flex:1
        },
        {
            dataIndex: 'ScheduleState',
            text: 'Schedule State'
        },
        {
            dataIndex: 'Owner',
            text: 'Owner'
        }
        ].concat(me.getDerivedColumns());
    },

    getDerivedColumns: function(){
        return [{
            tpl: '<div style="text-align:center;"></div>',
            text: 'Result Graph',
            xtype: 'templatecolumn',
            renderer: function(value, metaData, record){
                var values = {'lightgreen':record.get('Passing'),'red':record.get('Failing'),'yellow':record.get('NoRun'),'blue':record.get('Other')}

                if (values && Ext.isObject(values)){
                    var tpl = Ext.create('CArABU.technicalservices.ResultGraphTemplate');
                    return tpl.apply(values);
                }

                return '';
            }
        },{
            tpl: '<div style="text-align:center;">{Passing}</div>',
            text: 'Passing',
            xtype: 'templatecolumn'
        },{
            tpl: '<div style="text-align:center;">{Failing}</div>',
            text: 'Failing',
            xtype: 'templatecolumn'
        },{
            tpl: '<div style="text-align:center;">{NoRun}</div>',
            text: 'No Run',
            xtype: 'templatecolumn'
        },{
            tpl: '<div style="text-align:center;">{Other}</div>',
            text: 'Other',
            xtype: 'templatecolumn'
        },{
            tpl: '<div style="text-align:center;"></div>',
            text: 'User Story Coverage',
            xtype: 'templatecolumn',
            renderer: function(value, metaData, record){
                var values = {'lightgreen':record.get('TotalCovered'),'white': (record.get('TotalStories') - record.get('TotalCovered'))}

                if (values && Ext.isObject(values)){
                    var tpl = Ext.create('CArABU.technicalservices.ResultGraphTemplate');
                    return tpl.apply(values);
                }

                return '';
            }
        },{
            tpl: '<div style="text-align:center;">{TotalCovered}</div>',
            text: 'User Stories Covered',
            xtype: 'templatecolumn'
        },{
            tpl: '<div style="text-align:center;">{TotalStories}</div>',
            text: 'Total User Stories',
            xtype: 'templatecolumn'
        }];
    },    
 
    _loadWsapiRecords: function(config){
        console.log('_loadWsapiRecords',config);
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        // this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    getSettingsFields: function() {
        var check_box_margins = '5 0 5 0';
        return [{
            name: 'saveLog',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: check_box_margins,
            boxLabel: 'Save Logging<br/><span style="color:#999999;"><i>Save last 100 lines of log for debugging.</i></span>'

        }];
    },

    getOptions: function() {
        var options = [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];

        return options;
    },

    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }

        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{
            showLog: this.getSetting('saveLog'),
            logger: this.logger
        });
    },

    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    }

});


               Rally.launchApp('CArABU.app.TSApp', {
                   name: 'Feature Test Case Coverage Report'
               });
        });
    </script>

    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>